#!/usr/bin/env bash
set -euo pipefail

if ! [ -x "$(command -v docker)" ]; then
  echo 'Error: docker is not installed.' >&2
  exit 1
fi

# Not using docker-compose at the moment
#if ! [ -x "$(command -v docker-compose)" ]; then
#  echo 'Error: docker-compose is not installed.' >&2
#  exit 1
#fi

# Global flags
USE_SNAPSHOT=0

sandbox () {
  # Enter attaches users to a shell in the desired container
  enter () {
    echo "Entering /bin/bash session in the sandbox container..."
    docker exec -w /opt/algorand/node -it sandbox /bin/bash
  }

  # Logs streams the logs from the container to the shell
  logs () {
    if [[ $# -gt 1 && $2 == "raw" ]]; then
      docker exec -it sandbox tail -f /opt/algorand/node/data/node.log
    else
      docker exec -it sandbox /opt/algorand/node/carpenter -d /opt/algorand/node/data
    fi
  }

  # Start the algorand node
  up () {
    if [ "$(docker ps -a --filter name=sandbox -q)" ]; then
      if [[ $# -gt 1 ]]; then
        echo "A sandbox already exists, remove '$2' to resume the existing sandbox or run 'clean' before starting a new one."
      else
        echo "Starting the existing sandbox..."
        docker start sandbox > /dev/null
      fi
    else
      if [[ -d data && $# -gt 1 ]]; then
        echo "The data directory already exists, remove '$2' to resume the existing sandbox or run 'clean' before starting a new one."
        exit 1
      elif [[ -d data ]]; then
        echo "Resuming algorand sandbox with existing data directory."
      elif [[ $# -gt 1 ]]; then
        case $2 in
          mainnet)
            CHANNEL=stable
            GENESIS_VERSION=mainnet-v1.0
            ;;
          testnet)
            CHANNEL=stable
            SNAPSHOT_URL="https://algorand-repository.s3.amazonaws.com/testnet/ledger-snapshots/LATEST-SNAPSHOT/latest.tar.gz"
            GENESIS_VERSION=testnet-v1.0
            ;;
          betanet)
            CHANNEL=beta
            GENESIS_VERSION=betanet-v1.0
            ;;
          *)
            echo "Invalid network '$2', use one of ['mainnet', 'testnet', 'betanet']."
            exit 1
            ;;
        esac
      fi

      # Create a new data directory
      if [ ! -d data ]; then
        NETWORK=${2:-testnet}
        echo "Initializing data directory for $NETWORK..."

        if [[ $USE_SNAPSHOT == 1 ]]; then
          if [[ ${SNAPSHOT_URL:=""} == "" || ${GENESIS_VERSION:=""} == "" ]]; then
            echo "A snapshot is not available for $NETWORK."
            exit 1
          else
            echo "Downloading blockchain snapshot..."
            mkdir -p data/$GENESIS_VERSION
            pushd data/$GENESIS_VERSION
            wget https://algorand-repository.s3.amazonaws.com/testnet/ledger-snapshots/LATEST-SNAPSHOT/latest.tar.gz
            tar xvf latest.tar.gz
            rm latest.tar.gz
            popd
          fi
        fi

        mkdir -p data
        cp genesis/${NETWORK}/genesis.json data
      fi

      CHANNEL=${CHANNEL:-stable}
      echo "Creating a new Docker Image..."
      docker build \
        --build-arg channel=$CHANNEL \
        --build-arg USER_ID=$(id -u ${USER}) \
        --build-arg GROUP_ID=$(id -g ${USER}) \
        -t \
        algorand-sandbox:$CHANNEL \
        images/
      docker run \
        -u $(id -u ${USER}):$(id -g ${USER}) \
        -d \
        --name sandbox \
        --mount type=bind,source="$(pwd)"/data,target=/opt/algorand/node/data \
        algorand-sandbox:$CHANNEL
    fi
  }

  help () {
      cat <<-EOF
sandbox commands:
  up (mainnet||testnet||betanet) [-s||--use-snapshot]
          -> spin up the sandbox environment, optionally provide -s to
             initialize the blockchain from a snapshot if one is available
  down    -> tear down the sandbox environment
  restart -> restart the sandbox
  enter   -> enter the sandbox container
  clean   -> stops and deletes containers and data directory

algorand commands:
  logs        -> stream algorand logs with the carpenter utility
  status      -> get node status
  goal (args) -> run goal command like 'goal node status'

tutorials:
  introduction -> learn how to get Algos on testnet and create a transaction

EOF
  }

  if [ $# -eq 0 ]; then
    help
    exit 1
  fi

  case $1 in
    up)
      up $@
      ;;

    down)
      echo "Stopping sandbox container..."
      docker kill sandbox > /dev/null
      ;;

    restart)
      echo "Restarting sandbox process..."
      docker restart sandbox
      ;;

    clean)
      echo "Stopping running container..."
      docker kill sandbox > /dev/null 2>&1 || true

      echo "Stopping and removing running sandbox container..."
      docker rm sandbox > /dev/null 2>&1 || true
      docker rmi $(docker images --filter=reference=algorand-sandbox -q) > /dev/null 2>&1 || true
      docker rmi $(docker images -f "dangling=true" -q) > /dev/null 2>&1 || true

      echo "Removing algorand sandbox data..."
      rm -rf data
      ;;

    enter)
      enter $@
      ;;

    logs)
      logs $@
      ;;

    status)
      docker exec -it sandbox /opt/algorand/node/goal node status -d /opt/algorand/node/data
      ;;

    goal)
      shift
      docker exec -it sandbox /opt/algorand/node/goal $@ -d /opt/algorand/node/data
      ;;

    introduction)
      ./utils/transaction.sh
      ;;

    *)
      help
      ;;
  esac
}

PARAMS=""
while (( "$#" )); do
  case "$1" in
    -s|--use-snapshot)
      USE_SNAPSHOT=1
      shift
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done

pushd `dirname $0` > /dev/null
sandbox $PARAMS
popd > /dev/null
